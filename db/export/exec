#!/usr/bin/env ruby
# frozen_string_literal: true

ENV["RAILS_ENV"] ||= "production"
require File.expand_path(File.join(File.dirname(__FILE__), "..", "..", "config", "environment"))
unless Rails.env.production?
  puts("Skipping db export, not running in production mode")
  exit(0)
end

date = `date +"%Y-%m-%d"`[..-2]

target = ENV.fetch("TARGET_DIR", "/data/db_exports")

FileUtils.mkdir_p("#{target}/#{date}")

error = false
Dir["#{File.dirname(__FILE__)}/*.sql"].each do |file|
  name = File.basename(file)[..-5]
  if File.exist?("#{target}/#{date}/#{date}-#{name}.csv.xz")
    puts("#{name} already exists, skipping")
    next
  end
  contents = File.read(file)
  system(%{psql -h postgres --username femboyfans -c "COPY (#{contents}) TO STDOUT DELIMITER ',' CSV HEADER;" femboyfans > "#{target}/#{date}/#{date}-#{name}.csv"}, exception: true)
  system(%(xz "#{target}/#{date}/#{date}-#{name}.csv"), exception: true)
  puts("#{name} done")
rescue RuntimeError => e
  puts("Error (#{name}): #{e}")
  FileUtils.rm("#{target}/#{date}/#{date}-#{name}.csv", force: true)
  FileUtils.rm("#{target}/#{date}/#{date}-#{name}.csv.xz", force: true)
  error = true
  break
end

if error
  puts("Skipping cleaning up old files due to errored state")
  Dir["#{target}/**/#{date}-*.csv.xz"].each do |file|
    puts("Removing #{file}")
    FileUtils.rm(file, force: true)
  end
else
  puts("Cleaning up old files")
  Dir["#{target}/*"].each do |dir|
    d = dir.split(File::SEPARATOR).last
    next if File.file?(dir) || !/^\d{4}-\d{2}-\d{2}$/.match?(d)
    date = Time.zone.parse(d)
    if date.day == 1
      puts("Archiving #{d}")
      system("tar cJf #{target}/#{d[0..-4]}.tar.xz -C #{target}/#{d} .", exception: true)
    end
    if date < 4.days.ago
      puts("Removing #{d}")
      FileUtils.rm_rf(dir)
    end
  end
end
