<%# locals: (type:, votes:, deletable: false, lockable: false) -%>

<%# path is a string here because of duplicate routes %>
<%= form_search(path: { controller: type.controller, action: :index }, policy: policy(type)) do |f| %>
  <%= f.user(:user, label: "Voter") %>
  <%= f.input(:"#{type.model_type}_id", label: "#{type.model_type.to_s.titleize} ID") %>
  <br>
  <%= f.user(:"#{type.model_type}_creator", label: "#{type.model_type.to_s.titleize} Creator") %>
  <%= f.input(:timeframe, label: "Timeframe", include_blank: true, collection: [["Last Week", "7"], ["Last Month", "30"], ["Last Three Months", "90"], ["Last Year", "360"]]) %>
  <%= f.input(:score, label: "Type", include_blank: true, collection: type.vote_types) %>
  <% if lockable %>
    <%= f.input(:is_locked, label: "Locked", as: :boolean) %>
  <% end %>
  <%= f.input(:ip_addr, label: "IP Address") %>
  <%= f.input(:duplicates_only, label: "Duplicates Only", as: :boolean) %>
  <%= f.input(:order, collection: [%w[Created id], ["IP Address", "ip_addr"]]) %>
<% end %>

<%= table_for(votes, id: "votes-table") do |t| %>
  <% t.column(:id, name: "ID") %>
  <% t.column("Post", if: type == CommentVote) do |vote| %>
    <%= link_to(vote.post.id, post_path(vote.post)) %>
  <% end %>
  <% t.column("#{type.model_type.to_s.titlecase} ID") do |vote| %>
    <%= link_to(vote.send("#{type.model_type}_id"), vote.send(type.model_type)) %>
  <% end %>
  <% t.column("#{type.model_type.to_s.titlecase} Creator") do |vote| %>
    <%= link_to_user(vote.send(type.model_type).send(type.model_creator_column)) %>
  <% end %>
  <% t.column("Voter") do |vote| %>
    <%= link_to_user(vote.user) %>
    <% if policy(vote).can_see_ip_addr? %>
      (<%= link_to_ip(vote.user_ip_addr) %>)
    <% end %>
    <p><%= time_ago_in_words_tagged(vote.created_at) %></p>
  <% end %>
  <% t.column("Email", if: policy(type).can_see_email?) do |vote| %>
    <%= vote.user.email %> <%= email_domain_search(vote.user.email) %>
  <% end %>
  <% t.column("Signed Up") do |vote| %>
    <%= time_ago_in_words_tagged(vote.user.created_at) %>
  <% end %>
  <% t.column("Vote") do |vote| %>
    <%= vote.vote_display.html_safe %>
  <% end %>
<% end %>

<% if (deletable || lockable) && policy(type).manage? %>
  <br>
  <ul>
    <li><%= tag.button("Select All", id: "select-all-votes") %></li>
    <% if lockable && policy(type).lock? %>
      <li><%= tag.button("Lock Votes", id: "lock-votes") %> Set the votes to 0, preventing the user from voting on the <%= type.model_type %> again</li>
    <% end %>
    <% if deletable && policy(type).delete? %>
      <li><%= tag.button("Delete Votes", id: "delete-votes") %> Remove the votes</li>
    <% end %>
  </ul>

  <%= javascript_tag(nonce: true) do -%>
    new Danbooru.VoteManager('<%= type.model_type %>');
  <% end -%>
<% end %>

<%= numbered_paginator(votes) %>

<%= render(partial: "user_votes/secondary_links", locals: { votes: votes }) %>

<% content_for(:page_title) do %>
  <%= type.model_name.plural.titleize %>
<% end %>
